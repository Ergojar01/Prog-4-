Clases y Objetos

¿Cómo definirías una clase y un objeto en tus propias palabras?

Una clase es un esquema que establece un conjunto de atributos y funciones comunes para un grupo de objetos. Es como un molde que describe las características y comportamientos que tendrán los objetos creados a partir de ella. Un objeto, por otro lado, es una instancia concreta de una clase, que posee valores específicos para los atributos definidos en la clase y puede utilizar los métodos correspondientes.

¿Qué atributos y métodos tenía la clase Coche que creaste?

Atributos: color, marca.
Métodos: arrancar(), detener().

¿Cómo se crea un objeto en PHP? Proporciona un ejemplo:

En PHP, un objeto se crea utilizando la palabra clave new seguida del nombre de la clase.

Ejemplo:

php
Copiar código
$miCoche = new Coche();
$miCoche->color = "Rojo";
$miCoche->marca = "Toyota";
Describe un ejemplo de la vida real que podría ser representado por una clase y un objeto en programación:

Un ejemplo sería una clase Libro en un sistema de biblioteca. La clase Libro podría tener atributos como titulo, autor, ISBN, y métodos como abrirLibro() y leerPagina(). Un objeto de esta clase podría ser $miLibro = new Libro("Cien Años de Soledad", "Gabriel García Márquez", "1234567890");.

Herencia

¿Qué es la herencia en la programación orientada a objetos?

La herencia es un principio que permite a una clase hija (o subclase) adquirir las propiedades y métodos de una clase padre (o superclase). Esto facilita la reutilización de código y la creación de estructuras de clases más organizadas.

¿Qué clase creó la clase CocheDeportivo y qué atributos y métodos heredó de la clase Coche?

La clase CocheDeportivo fue derivada de la clase Coche. Heredó los atributos color y marca, así como los métodos arrancar() y detener().

Explica cómo la clase CocheDeportivo añadió funcionalidad adicional a la clase Coche:

La clase CocheDeportivo amplió la funcionalidad al incluir un método adicional llamado activarTurbo(), que permite activar el turbo del coche deportivo, una característica que no estaba presente en la clase base Coche.

Proporciona un ejemplo de herencia en un contexto diferente al del coche:

Ejemplo en el contexto de dispositivos electrónicos:

php
Copiar código
class Dispositivo {
    public $marca;
    public $modelo;

    public function encender() {
        echo "El dispositivo está encendido<br>";
    }

    public function apagar() {
        echo "El dispositivo está apagado<br>";
    }
}

class Smartphone extends Dispositivo {
    public function hacerLlamada() {
        echo "Realizando una llamada<br>";
    }
}

$miTelefono = new Smartphone();
$miTelefono->marca = "Samsung";
$miTelefono->modelo = "Galaxy S21";
$miTelefono->encender();
$miTelefono->hacerLlamada();
$miTelefono->apagar();
Polimorfismo

¿Qué es el polimorfismo en el contexto de la programación orientada a objetos?

El polimorfismo es la capacidad de diferentes clases de implementar métodos con el mismo nombre pero con comportamientos distintos. Esto permite que un método pueda actuar de diferentes maneras según el objeto que lo invoque.

¿Cómo demostraste el polimorfismo en las clases Coche y CocheDeportivo?

El polimorfismo se mostró al sobrescribir el método descripcion() en la clase CocheDeportivo, permitiendo que tanto Coche como CocheDeportivo tuvieran su propia versión de este método. Así, al llamar a descripcion(), el comportamiento varía según si el objeto es un Coche o un CocheDeportivo.

Encapsulamiento

¿Qué es el encapsulamiento y por qué es importante en la programación orientada a objetos?

El encapsulamiento consiste en restringir el acceso directo a ciertos atributos o métodos de un objeto, permitiendo que solo sean accesibles a través de métodos públicos (getters y setters). Es fundamental porque protege los datos de modificaciones no deseadas y asegura la integridad de los objetos.

¿Cómo protegiste los atributos color y marca en la clase Coche?

Los atributos color y marca fueron declarados como private, lo que impide que se accedan directamente desde fuera de la clase. Sólo pueden ser modificados o accedidos mediante métodos públicos como setColor(), getColor(), setMarca(), y getMarca().

¿Qué son los métodos getter y setter y cómo se utilizan?

Los métodos getter permiten obtener el valor de un atributo privado, mientras que los métodos setter permiten modificar dicho valor. Se usan para controlar cómo se accede y se modifica un atributo del objeto, asegurando la validez y consistencia de los datos.

Ejemplo:

php
Copiar código
$miCoche->setColor("Verde");
echo $miCoche->getColor(); // Muestra "Verde"
Abstracción

¿Cómo definirías abstracción en tus propias palabras?

La abstracción es el proceso de simplificar la complejidad ocultando los detalles internos de un sistema y mostrando únicamente la funcionalidad esencial. En la programación orientada a objetos, la abstracción se implementa a través de clases abstractas e interfaces.

¿Qué es una clase abstracta y cómo se utilizó en el archivo 05_abstraccion.php?

Una clase abstracta es una clase que no puede ser instanciada directamente y que puede contener métodos abstractos, que deben ser implementados por las clases derivadas. En el archivo 05_abstraccion.php, la clase abstracta Vehiculo se utilizó para definir un método descripcion() que fue implementado en la clase Coche.

Constructores y Destructores

¿Qué es un constructor y cuándo se utiliza?

Un constructor es un método especial que se ejecuta automáticamente cuando se crea un nuevo objeto de una clase. Se utiliza para inicializar los atributos del objeto y realizar cualquier configuración inicial que sea necesaria.

¿Cómo inicializaste los atributos color y marca en el constructor de la clase Coche?

Los atributos color y marca se inicializaron dentro del constructor al pasar los valores correspondientes como parámetros:

php
Copiar código
public function __construct($color, $marca) {
    $this->color = $color;
    $this->marca = $marca;
}
¿Qué es un destructor y cuándo se ejecuta?

Un destructor es un método especial que se ejecuta automáticamente cuando un objeto es destruido o ya no es necesario. Se utiliza para liberar recursos o realizar tareas de limpieza. En PHP, el destructor se define mediante __destruct() y se ejecuta al finalizar el script o cuando se elimina el objeto.